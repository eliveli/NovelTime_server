version: "3.9"

services:
  noveltime-web:
    build:
      context: ../client
    ports:
      - "80:80"
      - "443:443"
    networks:
      - api

  noveltime-was:
    build:
      context: .
    depends_on:
      - noveltime-db
    expose:
      - "8082"
    networks:
      - api
      - db

  noveltime-db:
    image: mariadb:10.9.2
    restart: always
    expose:
      - "3306"


    env_file: ./db/.env
    networks:
      - db
    volumes:
      - ./db/data:/var/lib/mysql
      - ./db/dump:/disk
      - ./db/initdb.d:/docker-entrypoint-initdb.d
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci

networks:
  api:
    driver: bridge
  db:
    driver: bridge

# Check Points as working with docker-compose (some of what I learned) :
# 1. docker network.
#     docker makes and runs its own network seperated from host machine.
#     in docker compose file, each service's host name is its service name I set.
#     use the name especially when setting env var. 
# 2. port forwarding(the device's problem).
#     it's about host port forwarding not docker's.
#     in my case port forwarding couldn't work because of modem from ISP.
#      I guessed it would work since I had replaced router with new one but that was not the reason.
#      modem from SK, one of ISPs, prevented router from doing port-forwarding.
#      so I could test as connecting PC to modem directly without router and requesting to the domain from the PC.
#      it looked to work well,
#     but again I found that port was still closed when I tested with other device - my phone as requesting to the domain.
#      because of port prevention I couldn't get the ssl cert from certbot.
#      I need another router to work as bridge mode.
#      then the ethernet will be connected like this : modem - routerA (bridge mode) - routerB (router mode) - server computer
# 3. reflecting changed files directly
#    after changing source files I should build new image that use them.
#     using these commands "docker compose down" and "docker compose up" in order don't rebuild it.
#     and even the command "docker compose --build ..." can cause an error.
#     just after rebuilding and reusing the command "docker-compose up" it works as I expected without an error.
#      like this: first "docker compose up --build", after error ctrl+c, and "docker compose down", last "docker compose up".
#    The error might occur because of the order between running processes right after building.